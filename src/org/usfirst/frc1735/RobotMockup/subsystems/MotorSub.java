// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc1735.RobotMockup.subsystems;

import org.usfirst.frc1735.RobotMockup.RobotMap;
import org.usfirst.frc1735.RobotMockup.commands.*;

import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Victor;

import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 *
 */
public class MotorSub extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final SpeedController motor = RobotMap.motorSubMotor;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS


    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new MotorByJoystick());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
    
    public void activateMotor(double magDir) {
    	// Simply take the joystick value and apply it to the motor.
    	// The magnitude of the value will determine the motor speed (0 to 1 range is 0 to 100% speed)
    	// The sign determines the motor's direction.
    	motor.set(magDir);
    }

	public void controlMotorWithJoysticks(Joystick joyLeft, Joystick joyRight) {
		// Poll the left-hand joystick X axis to control this motor.
		
		// The following indented code is a copy from Drivetrain.java.
		// It would be nice to make this a subroutine, but that requires building input and output arrays to hold the four values, putting the data into the arrays,
		// calling the function, and then extracting the data from the arrays.  That code is actually longer than just duplicating the original code!
			// Extract the joystick values
			double joyLeftX, joyLeftY, joyRightX, joyRightY;
			
			// If an Xbox controller, try using the two sticks on controller 1 (Right side) instead of using two joysticks
			if (joyRight.getIsXbox()) {
				joyLeftX = joyRight.getRawAxis(0);  // Left stick X
				joyLeftY = joyRight.getRawAxis(1);  // Left stick Y
				joyRightX = joyRight.getRawAxis(4); // Right stick X
				joyRightY = joyRight.getRawAxis(5); // Right stick Y
			}
			else {
				joyLeftX  = joyLeft.getX();
				joyLeftY  = joyLeft.getY();
				joyRightX = joyRight.getX();
				joyRightY = joyRight.getY();
			}
	
			// Print the raw joystick inputs
			//System.out.println("joyLeftY="+joyLeftY+" joyLeftX="+joyLeftX + " joyRightY="+joyRightY+" joyRightX="+joyRightX);
			
			// Apply the 'dead zone' guardband to the joystick inputs:
			// Centered joysticks may not actually read as zero due to spring variances.
			// Therfore, remove any small values as being "noise".
			double joystickDeadzone = SmartDashboard.getNumber("Joystick Deadzone", 0); // default to zero if entry not found
			if (Math.abs(joyLeftX) < joystickDeadzone)
				joyLeftX = 0;
			if (Math.abs(joyLeftY) < joystickDeadzone)
				joyLeftY = 0;
			if (Math.abs(joyRightX) < joystickDeadzone)
				joyRightX = 0;
			if (Math.abs(joyRightY) < joystickDeadzone)
				joyRightY = 0;
		
		// Apply the JoyX value (with squaring IF requested by the user for increased sensitivity for lower speeds)
		this.activateMotor(this.squareInputs(joyLeftX));
	}
	
	//This function duplicates the SquaredInputs functionality of the WPILIB Drivetrain classes.
	// Squaring the inputs allows greater control/sensitivity at slow speeds without affecting top speed (where 1*1 still == 1)
	public double squareInputs(double inputValue) {
		// Find out from the Smart Dashboard if the user wants squared inputs
		boolean squaredInputs = SmartDashboard.getBoolean("SquaredInputs", true); // Default to true if setting not found
	    if (squaredInputs) {
	        if (inputValue >= 0.0) {
	          inputValue = inputValue * inputValue;
	        } else {
	          inputValue = -(inputValue * inputValue);
	        }
	    }
	    // (if SquaredInputs isn't set, then we just return the input value unchanged; otherwise we're returning the squared value)
	    return inputValue;

	}
}

